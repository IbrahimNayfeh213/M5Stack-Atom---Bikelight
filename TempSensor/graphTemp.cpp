#include "M5Atom.h"
#include "millisDelay.h"
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

/* Set up text display*/
#define PIN 27

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(5, 5, PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
  NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
  NEO_GRB            + NEO_KHZ800);

/* Text variables */
/* text vars */
const uint16_t textWhite = matrix.Color(255, 255, 255);
int x    = matrix.width();
int pass = 0;

/*variable declaration*/
float tempVal;
float minVal[1440] = {42, 27, 39, 50, 30, 38, 42, 20, 4, 27, 11, 46, 35, 40, 42, 29, 6, 8, 37, 0, 37, 5, 0, 22, 48, 5, 39, 44, 16, 20, 16, 18, 43, 5, 0, 43, 28, 11, 21, 1, 19, 11, 0, 42, 25, 38, 15, 37, 22, 50, 9, 48, 15, 23, 40, 41, 17, 20, 25, 45, 28, 8, 22, 39, 18, 41, 31, 40, 22, 27, 0, 7, 39, 32, 19, 37, 16, 45, 32, 32, 22, 20, 10, 46, 36, 47, 29, 35, 12, 3, 35, 6, 37, 48, 12, 50, 26, 7, 24, 35, 26, 14, 25, 15, 40, 29, 36, 2, 6, 49, 49, 6, 32, 5, 19, 17, 0, 32, 6, 22, 21, 9, 1, 2, 7, 47, 14, 10, 0, 39, 49, 44, 33, 37, 21, 43, 12, 43, 1, 32, 41, 5, 6, 29, 12, 23, 21, 43, 49, 48, 39, 12, 49, 25, 14, 42, 47, 12, 32, 49, 19, 20, 23, 22, 29, 3, 8, 1, 15, 23, 0, 42, 41, 38, 1, 13, 10, 28, 24, 34, 25, 43, 46, 11, 40, 48, 23, 29, 35, 9, 7, 4, 3, 38, 46, 19, 35, 10, 21, 29, 16, 38, 39, 38, 6, 14, 8, 17, 26, 9, 29, 14, 24, 10, 4, 30, 23, 25, 2, 26, 23, 38, 12, 50, 32, 10, 5, 21, 47, 10, 24, 25, 24, 7, 20, 29, 0, 31, 20, 34, 31, 46, 42, 12, 44, 49, 42, 13, 18, 49, 4, 44, 45, 11, 49, 1, 32, 4, 22, 12, 18, 36, 32, 20, 21, 30, 39, 20, 22, 43, 38, 16, 4, 3, 15, 32, 42, 40, 14, 7, 37, 31, 40, 39, 40, 39, 16, 0, 23, 9, 0, 14, 48, 12, 16, 32, 13, 17, 44, 2, 19, 11, 47, 38, 29, 10, 42, 12, 50, 48, 48, 19, 14, 13, 1, 0, 43, 20, 18, 27, 22, 25, 33, 18, 45, 30, 16, 20, 45, 7, 48, 50, 25, 22, 7, 50, 5, 33, 1, 33, 38, 46, 10, 13, 0, 0, 4, 39, 19, 30, 7, 50, 44, 1, 5, 34, 5, 44, 20, 13, 46, 41, 0, 1, 13, 49, 26, 28, 43, 8, 48, 42, 39, 11, 49, 30, 44, 49, 46, 28, 49, 2, 4, 4, 27, 29, 12, 6, 11, 8, 38, 34, 18, 43, 25, 31, 21, 25, 44, 13, 38, 25, 50, 46, 16, 38, 11, 10, 0, 43, 30, 5, 32, 49, 31, 19, 6, 45, 36, 25, 40, 4, 29, 50, 49, 43, 3, 2, 32, 42, 40, 21, 15, 48, 1, 19, 1, 36, 2, 49, 32, 2, 18, 32, 34, 38, 27, 27, 18, 30, 44, 7, 41, 11, 47, 28, 35, 48, 48, 46, 0, 45, 35, 4, 34, 36, 8, 48, 27, 38, 22, 1, 4, 29, 39, 20, 20, 45, 13, 50, 16, 22, 39, 17, 46, 8, 12, 1, 18, 13, 18, 3, 12, 6, 13, 4, 17, 21, 23, 18, 24, 17, 23, 3, 31, 30, 25, 10, 3, 45, 49, 15, 37, 34, 13, 5, 4, 40, 36, 32, 25, 43, 31, 5, 9, 39, 12, 50, 2, 50, 43, 16, 27, 6, 16, 6, 12, 4, 37, 44, 9, 43, 14, 21, 2, 40, 39, 2, 29, 29, 22, 39, 30, 33, 8, 30, 3, 9, 10, 46, 23, 25, 22, 11, 28, 44, 14, 47, 45, 21, 37, 37, 24, 50, 30, 35, 47, 45, 7, 46, 30, 48, 17, 4, 7, 28, 43, 31, 2, 49, 23, 43, 35, 25, 6, 43, 47, 7, 39, 43, 17, 13, 50, 37, 38, 10, 24, 40, 32, 35, 16, 10, 42, 22, 29, 40, 43, 35, 23, 7, 15, 12, 25, 14, 21, 18, 22, 18, 33, 32, 28, 16, 10, 17, 30, 20, 47, 3, 27, 20, 49, 32, 20, 26, 17, 19, 48, 3, 43, 30, 9, 5, 10, 23, 42, 18, 45, 48, 17, 2, 10, 47, 10, 49, 17, 10, 29, 29, 38, 42, 17, 5, 35, 8, 14, 50, 1, 0, 41, 36, 50, 37, 11, 48, 40, 27, 7, 28, 8, 26, 36, 37, 37, 48, 11, 11, 41, 20, 19, 6, 46, 50, 2, 38, 25, 33, 0, 32, 36, 11, 16, 46, 32, 37, 45, 17, 17, 1, 26, 27, 20, 45, 29, 24, 47, 14, 13, 41, 29, 7, 8, 18, 36, 45, 17, 37, 48, 25, 3, 14, 2, 50, 36, 23, 37, 18, 35, 27, 2, 4, 32, 5, 48, 22, 44, 41, 1, 30, 37, 0, 16, 13, 31, 40, 23, 7, 36, 37, 32, 26, 20, 50, 34, 8, 0, 31, 23, 9, 1, 42, 39, 8, 39, 9, 1, 43, 49, 8, 15, 31, 31, 15, 10, 47, 19, 37, 1, 47, 17, 22, 38, 3, 36, 26, 38, 16, 7, 6, 48, 8, 29, 24, 4, 49, 44, 22, 7, 20, 36, 17, 39, 20, 8, 1, 12, 18, 22, 34, 25, 29, 18, 31, 50, 40, 17, 6, 15, 12, 42, 5, 14, 16, 16, 16, 32, 45, 19, 9, 20, 33, 29, 4, 23, 22, 36, 3, 16, 32, 5, 8, 34, 35, 36, 10, 38, 0, 47, 26, 13, 11, 50, 38, 49, 12, 13, 47, 23, 40, 39, 8, 31, 13, 33, 23, 44, 41, 34, 14, 47, 1, 44, 42, 38, 34, 20, 45, 6, 41, 43, 11, 20, 34, 32, 31, 31, 44, 16, 17, 4, 43, 46, 15, 28, 9, 5, 43, 39, 47, 11, 21, 45, 20, 8, 44, 27, 21, 25, 14, 26, 36, 29, 9, 18, 38, 19, 7, 50, 34, 6, 4, 47, 29, 20, 26, 18, 28, 2, 2, 50, 3, 26, 27, 5, 24, 4, 45, 48, 3, 33, 29, 33, 37, 40, 39, 18, 30, 2, 20, 10, 49, 28, 17, 19, 15, 2, 43, 43, 11, 50, 39, 36, 13, 39, 3, 16, 23, 17, 45, 17, 45, 8, 41, 32, 49, 43, 17, 10, 42, 50, 37, 42, 31, 41, 27, 21, 39, 26, 8, 49, 45, 7, 43, 0, 33, 13, 16, 49, 1, 21, 41, 35, 1, 37, 48, 23, 26, 48, 12, 14, 28, 39, 32, 16, 5, 23, 33, 48, 0, 41, 22, 29, 15, 19, 2, 37, 37, 43, 33, 49, 13, 40, 43, 22, 26, 6, 24, 15, 19, 17, 49, 10, 10, 22, 26, 40, 15, 3, 0, 46, 13, 31, 8, 26, 47, 29, 23, 32, 24, 13, 32, 26, 1, 7, 22, 44, 6, 33, 4, 2, 6, 8, 49, 14, 36, 22, 14, 19, 45, 31, 40, 49, 49, 19, 17, 4, 24, 14, 5, 9, 27, 9, 21, 38, 36, 35, 16, 21, 38, 48, 49, 5, 25, 11, 23, 45, 34, 43, 40, 3, 37, 38, 26, 32, 22, 15, 3, 14, 35, 40, 27, 30, 16, 12, 10, 37, 3, 45, 35, 36, 36, 2, 21, 7, 31, 6, 19, 45, 48, 5, 16, 36, 27, 43, 13, 11, 40, 19, 10, 4, 32, 14, 14, 8, 13, 29, 35, 48, 39, 14, 22, 5, 42, 28, 29, 16, 25, 36, 3, 4, 10, 15, 7, 18, 7, 15, 31, 13, 10, 7, 35, 6, 21, 19, 33, 45, 30, 7, 38, 42, 37, 2, 23, 20, 28, 27, 17, 41, 3, 39, 39, 35, 35, 49, 2, 6, 40, 50, 40, 44, 34, 46, 25, 11, 40, 25, 41, 19, 32, 25, 39, 2, 26, 0, 9, 39, 37, 23, 37, 49, 30, 1, 7, 6, 43, 31, 46, 26, 25, 36, 20, 3, 16, 9, 45, 20, 48, 1, 19, 14, 37, 22, 27, 22, 39, 32, 23, 12, 18, 15, 21, 41, 43, 27, 3, 47, 37, 13, 45, 23, 38, 22, 1, 11, 45, 28, 25, 27, 33, 2, 29, 17, 2, 37, 19, 35, 38, 21, 3, 37, 42, 46, 38, 12, 24, 42, 37, 26, 10, 21, 44, 21, 49, 1, 6, 30, 2, 10, 20, 28, 34, 10, 14, 38, 40, 30, 48, 21, 1, 47, 24, 47, 41, 38, 15, 15, 26, 33, 30, 13, 11, 24, 27, 27, 28, 8, 18, 38, 25, 37, 15, 11, 21, 2, 10, 25, 29, 40, 1, 2, 41, 9, 42, 14, 27, 7, 27, 15, 37, 44, 7, 40, 17, 50, 48, 44, 31, 2, 11, 1, 4, 41, 37, 22, 32, 39, 15, 38, 50, 21, 42, 48, 22, 43, 12, 10, 37, 19, 23, 21, 7, 2, 50, 9, 49, 11, 6, 9, 1, 37, 44, 15, 19, 42, 23, 2, 15, 4, 12, 3, 11, 23, 17, 25, 35, 45, 5, 50, 40, 48, 19};
float hourVal[24];
int minCtr;
int hourCtr;
int dayCtr;
int minAvg = 0;
int hourAvg = 0;
int dayAvg = 0;
int minSum = 0;
millisDelay ReadDelay;
int interval = 60000;

/*temp color values*/
const uint32_t blue = 0x0000ff;
const uint32_t green = 0x00ff00;
const uint32_t yellow = 0xffff00;
const uint32_t red = 0x00ff00;
uint32_t curColor; 

void minToHour(){
  int hCtr = 0;
  int hourCount = (sizeof(minVal)/sizeof(int)) / 60;
  while(hCtr < hourCount){
    int mCtr = hCtr * 60;
    int mEnd = mCtr + 60;
    while(mCtr < mEnd){
      minSum += minVal[mCtr];
      mCtr++;
    }
    hourVal[hCtr] = minSum / 60;
    hCtr++;
    minSum = 0;
  }
}

void displayGraph(){
  for(int gCtr = 0; gCtr < 24; gCtr++){
    Serial.println(hourVal[gCtr]);
    curColor = tempColorSelect(hourVal[gCtr]);
    colorPixel(gCtr, curColor);
  }
}

uint32_t tempColorSelect(float tempVal){
  uint32_t color;
  if(tempVal < 15){
    color = blue;
  }else if (tempVal < 30){
    color = green;
  }else if (tempVal < 35){
    color = yellow;
  }else{
    color = red;
  }
  return(color);
}

void colorPixel(int pixel,uint32_t color){
   matrix.setPixelColor(pixel, color);
}

void setup() {
  M5.begin(true,false, true);
  M5.IMU.Init();
  matrix.clear();
  Serial.begin(115200);
  Serial.println("Temperature Data");
  ReadDelay.start(interval);
}

void loop() {
  minToHour();  
  displayGraph();
  matrix.show();
  M5.update();  
}
